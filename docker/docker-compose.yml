name: easy-elastic

volumes:
  elastic-data:
    driver_opts:
      type: none
      device: ${DATA_ROOT}/elastic-data
      o: bind
  kibana-data:
    driver_opts:
      type: none
      device: ${DATA_ROOT}/kibana-data
      o: bind

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    hostname: ${HOST_NAME}
    networks:
      default:
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      # Auto-magically used as password for user "elastic"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    ports:
      - 127.0.0.1:9200:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200 | grep -q 'credentials'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: '16GB'

  set-kibana-password:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD}
    command: >
      curl -X POST -u "elastic:${ELASTIC_PASSWORD}" 
      -H "Content-Type: application/json" 
      http://elasticsearch:9200/_security/user/kibana_system/_password 
      -d "{\"password\":\"${KIBANA_PASSWORD}\"}"
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    hostname: ${HOST_NAME}
    ports:
      - 127.0.0.1:5601:5601
    volumes:
      - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      # - elastic-certs:/usr/share/elasticsearch/config/certs:ro
      - kibana-data:/usr/share/kibana/data
    environment:
      ELASTIC_HOST: ${ELASTIC_HOST}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
